bsort:
    @ Bubble sort an array of 32bit integers in place
    @ Arguments: R0 = Array location, R1 = Array size
    PUSH    {R0-R12,LR}         @ Push the existing registers on to the stack
    MOV     R4,R0               @ R4 = Array Location
    MOV     R5,R1               @ R5 = Array size
bsort_check:                   @ Check for a sorted array
    MOV     R6,#0               @ R6 = Current Element Number
bsort_check_loop:              @ Start check loop
    ADDS    R7,R6,#1            @ R7 = Next Element Number
    CMP     R7,R5               @ Check for the end of the array
    BGE     bsort_done          @ Exit method if we reach the end of the array
    LDR     R8,[R4,R6,LSL #2]   @ R8 = Current Element Value
    LDR     R9,[R4,R7,LSL #2]   @ R9 = Next Element Value
    CMP     R8,R9               @ Compare element values
    BGT     bsort_swap          @ If R8 > R9, swap
    MOV     R6,R7               @ Advance to the next element
    B       bsort_check_loop    @ End check loop
bsort_swap:                    @ Swap values
    STR     R9,[R4,R6,LSL #2]   @ Store current element at next location
    STR     R8,[R4,R7,LSL #2]   @ Store next element at current location
    B       bsort_check         @ Check again for a sorted array
bsort_done:                    @ Return
    POP     {R0-R12,PC}         @ Pop the registers off of the stack and return